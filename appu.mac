; //////////////////////////////////////////////////////////////////////////////
; // CPU-PPU channels
; //////////////////////////////////////////////////////////////////////////////

; print string with channel 0
PriSt0:	mov	R1, -(SP)
10$:	movb	(R0)+, R1
	beq	99$
	tstb	@#177564
	bpl	.-4
	movb	R1, @#177566
	br	10$
99$:	mov	(SP)+, R1
	return

; channel 2 data
PPmsg:	.word	PPArr
        .word	177777
PPArr:	.byte	0				; 23334 return value (0 - OK)
PPCmd:	.byte	1				; 23335 command (1 - allocate)
PPDev:	.word	32				; 23336 device type (0x-FD, 32-ppu mem)
PPApp:	.word	0				; 23340 argument(s) (PPU addr for mem operations)
PPAcp:	.word	End-PpuStart/2			; 23342 CPU addr (length in words for mem allocate)
PPLen:	.word	End-PpuStart/2			; 23344 length in words

; send to PPU by channel 2
PPSen:	mov	#PPMsg, R2
	mov	#5, R3
	br	20$
10$:	movb	(R2)+, @#176676
20$:	tstb	@#176674
	bpl	20$
	sob	R3, 10$
	return

; run code, wait for execution
RunPpu:	call	PPSen
	tstb	PPArr
	beq	10$
	mov	#MsgNoPpu, R0
	jmp	Exit
10$:	movb	#20, PPCmd
	mov	#PpuStart, PPAcp
	call	PPSen
	movb	#30, PPCmd
	call	PpSen
20$:	tst	PpuComm
	bmi	20$
	return

; free allocated
FrePpu:	movb	#2, PPCmd
	br	PPSen

; data
PpuComm:	.word	177777			; command to PPU

; //////////////////////////////////////////////////////////////////////////////
; // PPU code
; //////////////////////////////////////////////////////////////////////////////

PpuStart:
	mtps	#200
	; backup and clean low addrs except 272
	mov	PC, R0
	add	#PpuBkp-., R0
	clr	R1
	mov	#400, R3
10$:	mov	(R1), (R0)+
	cmp	R1, #272
	bne	20$
	tst	(R1)+
	br	30$
20$:	clr	(R1)+
30$:	sob	R3, 10$
	mov	#2, (R3)			; RTI at @#0	

; setup lines table
PpuSetVlines:
	mov	PC, R0
	add	#PpuLines+7-., R0
	bic	#7, R0				; R0 - line table start addr
	mov	R0, -(SP)			; save it
	bis	#6, (SP)			; +6 means first line descriptor have color
	mov	#^B1001100110001000, (R0)+ 	; YRGB YRGB YRGB YRGB for colors 1st part
	mov	#^B1010101011001100, (R0)+	; YRGB YRGB YRGB YRGB for colors 2nd part
	clr	(R0)+				; vaddr not used for first 18 lines
	mov	R0, (R0)
	add	#2, (R0)
	bis	#2, (R0)+			; +2 means next line is scale&cursor
	mov	#^B0000000000010000, (R0)+	; black colored graph cursor
	mov	#^B0000000000000111, (R0)+	; max luminance (xxxDDxBGR, DD: 00-640, 01-320, 10-160, 11-80)
	clr	(R0)+				; vaddr still not needed
	mov	R0, (R0)
	add	#2, (R0)+			; +0 means next line is 2-word descriptor
	; 16. not used lines
	mov	#16., R3
10$:	clr	(R0)+
	mov	R0, (R0)
	mov	R0, PpuScrollAddr		; save it to use in scrolling
	add	#2, (R0)+
	mov	R0, PpuScrollCur
	sob	R3, 10$
	; 288. main lines
	mov	#288., R3
	mov	#100000, R1
	mov	R0, -(SP)			; store top
20$:	mov	R1, (R0)+			; put vaddr
	mov	R0, (R0)			; put next element addr
	add	#2, (R0)+
	add	#C_SCRWID, R1			; advance vaddr
	sob	R3, 20$
	; cycle to top
	mov	(SP)+, -(R0)
	mov	R0, PpuScrollMax
	sub	#2, PpuScrollMax
	; set lines
	mov	(SP)+, @#272

; setup other
PpuSetOther:
	mov	@#177054, PpuBkp054
	; timers
	; bis	#^B0000001000000000, @#177054	; disable vsync in CPU
	bic	#^B0000000100000000, @#177054	; enable vsync in PPU
	bic	#^B0001111110000000, @#177716	; sound init (mixer off)
	call	PpuTimerInit			; init pp timer
	mov	PC, R0
	add	#PpuTimInt-., R0
	mov	R0, @#304
	mov	#200, @#306
	; keyboard
	mov	PC, R0
	add	#PpuKeyInt-., R0
	mov	R0, @#300
	bis	#100, @#177700			; allow keyboard interrupts
	; vsync
	mov	PC, R0
	add	#PpuVsyInt-., R0
	mov	R0, @#100
	mov	#200, @#102
	; check AY presence
	mov	PC, R0
	add	#PpuInt4-., R0
	mov	R0, @#4
	mov	#177777, R0
	tst	@#C_PORT_AY1
	mov	#bHaveAY/2, @#177010
	movb	R0, @#177014
	clr	@#4


; all is ok, signal to CPU
PpuOk:	mov	#177010, R4
	mov	#177014, R5
	mov	#PpuComm/2, (R4)
	clr	(R5)
	mtps	#0

; main PPU cycle
PpuMai:	mov	#PpuComm/2, (R4)
	mov	(R5), R0
	bmi	PpuExi
	beq	PpuMai
	asl	R0
	asl	R0
	add	R0, PC
	jmp	PpuOk				; 0
	jmp	PpuAY				; 1 C_PPU_AY
	jmp	PpuSnd				; 2 C_PPU_SND
	jmp	PpuVsc				; 3 C_PPU_VSCR
	jmp	PpuVrs				; 4 C_PPU_VRST

; restore, return
PpuExi:	mtps	#200
	call	PpuTimerInit
	; restore
	mov	PC, R0
	add	#PpuBkp-., R0
	clr	R1
	mov	#400, R3
	mov	(R0)+, (R1)+
	sob	R3, .-2
	mov	PpuBkp054, @#177054
	; signal to CPU
	mov	#PpuComm/2, @#177010
	clr	@#177014
	mtps	#0
	return


; out AY regs
PpuAY:	mov	#Pt3DataOut/2, (R4)
	mov	(R5), R2			; R2 AY port #
	mov	#13., R1			; start from reg #13
	inc	(R4)
	mov	(R5), R0			; AY data [#13 #12]
	swab	R0
	tstb	R0
	bmi	10$				; do not out reg #13 if negative
	mov	R1, (R2)			; #13 select
	movb	R0, (R2)			; #13 data
10$:	swab	R0
	dec	R1
	mov	R1, (R2)			; #12 select
	movb	R0, (R2)			; #12 data
	; regs #11 .. #0
20$:	dec	R1
	bmi	PpuOk
	inc	(R4)
	mov	(R5), R0
	swab	R0
	mov	R1, (R2)
	movb	R0, (R2)
	dec	R1
	swab	R0
	mov	R1, (R2)
	movb	R0, (R2)
	br	20$


; sound proc
PpuSnd:	mov	#bSoundNum/2, (R4)		; sound # to play from CPU
	mov	(R5), R0
	bne	10$				; have something to play
	mov	PpuSndCur, R0			; check already playing
	bne	20$				; have something
	jmp	PpuOk
10$:	clr	(R5)
	asl	R0				; to word
	add	PC, R0
	add	#PpuSndTbl-., R0
	add	(R0), R0
20$:	clr	R3
30$:	bisb	(R0)+, R3
	beq	80$				; end of sound
	cmp	#1, R3
	beq	90$				; end of current frame sound
	asr	R3
	asr	R3
	bis	#200, @#177716
	sob	R3, .
	bisb	(R0)+, R3
	beq	80$				; end of sound
	cmp	#1, R3
	beq	90$				; end of current frame sound
	asr	R3
	asr	R3
	bic	#200, @#177716
	sob	R3, .
	br	30$
80$:	clr	R0
90$:	mov	R0, PpuSndCur
	jmp	PpuOk


; scroll screen one line up
PpuVsc:	mov	PpuScrollAddr, R0
	sub	#4, PpuScrollCur
	cmp	PpuScrollCur, R0
	bhi	10$
	mov	PpuScrollMax, PpuScrollCur
10$:	mov	PpuScrollCur, (R0)
	jmp	PpuOk


; reset scroll
PpuVrs:	mov	PpuScrollAddr, R0
	tst	(R0)+
	mov	R0, PpuScrollCur
	mov	R0, -(R0)
	jmp	PpuOk


; pp timer ready wait
PpuTimerInit:
	clr	@#177710			; clear state, also stop timer
	clr	@#177712			; clear buffer
	tst	@#177714			; read current value
	bne	.-4				; wait until cleared
	return


; temporary trap 4
PpuInt4:
	clr	R0
	rti


; keys int
PpuKeyInt:
	mov	@#177010, -(SP)
	mov	R0, -(SP)
	movb	@#177702, R0			; scancode (read it just once)
	bmi	50$ 				; key released (not needed)
	mov	#bKeyCur/2, @#177010		; set 'current' key
	movb	R0, @#177014
50$:	mov	(SP)+, R0
	mov	(SP)+, @#177010
	rti


; vsync int
PpuVsyInt:
	; start timer
	mov	#2220., @#177712		; set buffer reg (2500x8mks = 20000mks = 1/50s)
	tst	@#177714			; load counter reg
	mov	#^B01000101, @#177710		; start, 8mks, allow int on zero (0I000FFS, FF - 00-2mks, 01-4mks, 10-8mks, 11-16mks)
	rti


; timer int
PpuTimInt:
	mov	@#177010, -(SP)
	; set 'vsync' bit in CPU
	mov	#VsyCnt/2, @#177010
	inc	@#177014
	clr	@#177710			; stop timer
	mov	(SP)+, @#177010
	rti


; data
PpuScrollAddr:	.word	0
PpuScrollCur:	.word	0
PpuScrollMax:	.word	0
PpuSndCur:	.word	0			; current sound byte addr
PpuBkp054:	.word	0			; save 177054
PpuBkp710:	.word	0			; save 177710
PpuBkp:		.blkw	400			; 0-1000 addrs backup
PpuLines:	.blkw	288.+16.*2+8.+4.	; 304 x 2-words + 2 x 4-words + 4 x 1-word (for align)


; sound data RADIX 10 RADIX 10
	.radix	10
PpuSndTbl:	
	.word	0, Snd001-., Snd002-., Snd003-., Snd004-., Snd005-., Snd006-.
; simple menu sound
Snd001:	.byte	040, 040, 080, 080, 120, 120, 120, 120
	.byte	0
; tick sound
Snd002:	.byte	050, 050, 0
; remove tile sound
Snd003:	.byte	194, 079, 037, 026, 075, 025, 210, 041
	.byte	037, 076, 026, 052
	.byte	0
; exit opened 
Snd004:	.byte	024, 084, 057, 089, 063, 095, 074, 097
	.byte	085, 105, 090, 112, 101, 116, 109, 122
	.byte	118, 128, 125, 136, 134, 141, 142, 148
	.byte	149, 156, 157, 162, 164, 169, 172, 176
	.byte	0
; take box 
Snd005:	.byte	150, 151, 152, 153, 154, 155, 154, 153, 152, 151, 151, 150
	.byte	150, 151, 152, 153, 154, 155, 154, 153, 152, 151, 151, 150, 1
	.byte	110, 111, 112, 113, 114, 115, 114, 113, 112, 111, 111, 110
	.byte	110, 111, 112, 113, 114, 115, 114, 113, 112, 111, 111, 110, 1
	.byte	050, 051, 052, 053, 054, 055, 054, 053, 052, 051, 051, 050
	.byte	050, 051, 052, 053, 054, 055, 054, 053, 052, 051, 051, 050
	.byte	0
; live lost
Snd006:	.byte	 10, 230,  10, 216,  14, 176,  12, 155, 1
	.byte	 14, 144,  16, 128,  10, 112,  14, 123, 1
	.byte	 10, 230,  10, 250,  30, 210,  28, 201, 1
	.byte	 24, 144,  26, 128,  20, 112,  20, 132, 1
	.byte	 36,  80,  32, 128,  34, 176,  32, 185, 1
	.byte	 26, 192,  28, 208,  24, 240,  21, 235, 1
	.byte	 26, 192,  28, 128,  24, 176,  28, 200, 1
	.byte	 36,  80,  32,  80,  32,  64,  36,  85, 1
	.byte	 46,  80,  42,  80,  42,  64,  46,  71, 1
	.byte	0
	.even
	.radix	8
; sound data ends RADIX 8 RADIX 8
